import results as res
import time

class Timer(object):
    def __init__(self, verbose=False):
        self.verbose = verbose

    def __enter__(self):
        self.start = time.time()
        return self

    def __exit__(self, *args):
        self.end = time.time()
        self.secs = self.end - self.start
        self.msecs = self.secs * 1000  # millisecs
        if self.verbose:
            print 'elapsed time: %f ms' % self.msecs



r = res.Results(respath = "~/Desktop/mosaic_test/results.txt")

first = r.get(camcol=3, field=429, filter="u")[0]

x1 = first.x1
y1 = 2*first.y1 -first.y2
x2 = first.x2
y2 = first.y2
#camcol = 3
#filter = "i"

m = (y2-y1)/(x2-x1)
b = y1-m*x1
            



first = r.get(camcol=2, field=425, filter="g")[0]
x1 = first.x1
y1 = 2*first.y1 -first.y2 + 279
x2 = first.x2
y2 = first.y2 + 279
p1 = Point(x1, y1, camcol=2, filter="g")
p2 = Point(x2, y2, camcol=2, filter="g")
l = Line(p1, p2)
test =  l.getCCDChips()
#l.showLine() #blue
#
#first = r.get(camcol=2, field=424, filter="g")[0]
#x1 = first.x1
#y1 = 2*first.y1 -first.y2 + 279
#x2 = first.x2
#y2 = first.y2 + 279
#p1 = Point(x1, y1, camcol=2, filter="g")
#p2 = Point(x2, y2, camcol=2, filter="g")
#l = Line(p1, p2)
#l.showLine() #blue
#
#first = r.get(camcol=3, field=430, filter="i")[0]
#x1 = first.x1
#y1 = 2*first.y1 -first.y2 + 279
#x2 = first.x2
#y2 = first.y2 + 279
#p1 = Point(x1, y1, camcol=3, filter="i")
#p2 = Point(x2, y2, camcol=3, filter="i")
#l = Line(p1, p2)
#l.showLine(color=(0,255,0)) #green
#
#
#first = r.get(camcol=4, field=432, filter="r")[0]
#x1 = first.x1
#y1 = 2*first.y1 -first.y2 + 279
#x2 = first.x2
#y2 = first.y2 + 279
#p1 = Point(x1, y1, camcol=4, filter="r")
#p2 = Point(x2, y2, camcol=4, filter="r")
#l = Line(p1, p2)
#l.showLine(color=(0,0,255)) #red
#
#
#first = r.get(camcol=3, field=429, filter="u")[0]
#x1 = first.x1
#y1 = 2*first.y1 -first.y2 + 279
#x2 = first.x2
#y2 = first.y2 + 279
#p1 = Point(x1, y1, camcol=3, filter="u")
#p2 = Point(x2, y2, camcol=3, filter="u")
#l = Line(p1, p2)
#l.showLine(color=(255, 255, 0)) #turqua
#
#
#first = r.get(camcol=3, field=428, filter="u")[0]
#x1 = first.x1
#y1 = 2*first.y1 -first.y2 + 279
#x2 = first.x2
#y2 = first.y2 + 279
#p1 = Point(x1, y1, camcol=3, filter="u")
#p2 = Point(x2, y2, camcol=3, filter="u")
#l = Line(p1, p2)
#l.showLine(color=(255, 255, 0)) #turqua