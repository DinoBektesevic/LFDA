from .base import Base
from .basictime import BasicTime

from astropy.time import Time

import sqlalchemy as sa
from sqlalchemy.orm import relationship


        #self.start = BasicTime(start_t, t_format)
        #self.end = BasicTime(end_t, t_format)

class LineBasicTime(Base):
    __tablename__ = "basiclinetimes"
    id = sa.Column(sa.Integer, primary_key=True)

    start_tai = sa.Column(sa.Float)
    start_mjd = sa.Column(sa.Float)
    start_iso = sa.Column(sa.String(23))

    end_tai = sa.Column(sa.Float)
    end_mjd = sa.Column(sa.Float)
    end_iso = sa.Column(sa.String(23))

    def __init__(self, start_t, end_t, t_format="tai"):#start_t, end_t,  t_format="tai"):
        t1 = BasicTime(start_t, t_format)
        t2 = BasicTime(end_t, t_format)
        


    

    


class LineTime(Base):
    __tablename__ = "linetimes"
    id = sa.Column(sa.Integer, primary_key=True)

    start_tai = sa.Column(sa.Float)
    start_mjd = sa.Column(sa.Float)

    end_tai = sa.Column(sa.Float)
    end_mjd = sa.Column(sa.Float)
#    iso = sa.Column(sa.String(23))
    
    lines = relationship('Line', back_populates="linetimes")

    def __init__(self, start_t, end_t, t_format="tai"):
        if t_format.lower()=="tai":
            self._init_tai(start_t, end_t)
        elif t_format.lower()=="mjd":
            self._init_mjd(start_t, end_t)
#        elif t_format.lower() == "iso":
#            self._init_iso(t)
        else:
            raise ValueError("Unrecognized time format")

        ##JUST the year-month-day part of ISO time
#        self.ymd = self.iso.split(" ")[0]

    def _init_tai(self, start_t, end_t):
        self.start_tai = start_t
        self.start_mjd = start_t/(24.0*3600.0)

        self.end_tai = end_t
        self.end_mjd = end_t/(24.0*3600.0)
        
#        self.iso = Time(self.mjd, format="mjd").iso

    def _init_mjd(self, start_t, end_t):
        self.start_mjd = start_t
        self.start_tai = start_t*(24.0*3600.0)

        self.end_mjd = end_t
        self.end_tai = end_t*(24.0*3600.0)
#        self.iso = Time(self.mjd, format="mjd").iso

#    def _init_iso(self, t):
#        self.iso = t
#        self.mjd = Time(self.iso, format="iso").mjd
#        self.tai = self.mjd*24.0*3600.0

    def __repr__(self):
        return str(self.tai)

    def __eq__(self, other):
        #mjd time is in seconds and offers a much more 
        #precise way of comparing time than tai which is in days.
        if self.mjd == other.mjd:
            return True
        return False

    def __lt__(self, other):
        if self.mjd < other.mjd:
            return True
        return False

    def __gt__(self, other):
        return not self.__lt__(other)

    def __le__(self, other):
        if self.__lt__(other) or self.__eq__(other):
            return True
        return False

    def __ge__(self, other):
        return not self.__le__(other)

        
