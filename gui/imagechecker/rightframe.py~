#!/usr/bin/python
# -*- coding: utf-8 -*-
from Tkinter import *
from ttk import *
from Tkinter import Button, Label
import tkFileDialog
import tkMessageBox

import results

class TopRight(Frame):
    def __init__(self, parent):
        Frame.__init__(self, width=300)
        self.pack(side=TOP, fill=BOTH)
        #self.grid_propagate(False)
        
        self.parent = parent
        self.data = parent.root.data

    def updateImageData(self):
        for widget in self.winfo_children():
            widget.destroy()

        curres = self.data.getImageData()
        
        if curres is not None:
            r = 1

            #spacer from the top of the frame
            Label(self).grid(row=0, columnspan=2, padx=50, pady=13)

            for i in self.data.keys[:5]:
                color = "light steel blue"
                if i == "false_positive":
                    if curres.false_positive == "1":
                        color = "red"
                    else:
                        color = "DarkOliveGreen3"
                        
                Label(self, text=i, relief=RIDGE, width=10, bd=1,
                      bg="light steel blue").grid(
                          row=r,column=0, padx=(50, 0))
                Label(self, text=getattr(curres, i), width=15,  bd=1,
                      relief=RIDGE, bg=color).grid(
                          row=r,column=1, padx=(0, 80))
                r+=1

            #spacer between topright and botright
            Label(self).grid(row=0, columnspan=2, padx=50, pady=13)
            
        else:
            Label(self, bg="red2", font=("Helvetica", 20),
                  text="NO IMAGE DATA\nFOUND").grid(row=0,
                                                    columnspan=2,
                                                    padx=50, pady=(50,0))

class BottomRight(Frame):
    def __init__(self, parent):
        Frame.__init__(self)
        self.pack(side=TOP, fill=BOTH, expand=1)
        self.parent = parent
        self.data = parent.root.data
        
        self.falsebtn = Button(self, text="FALSE", bg="tomato2",
                               command=self.false)
        self.falsebtn.pack(side=TOP, pady=4)
        
        self.truebtn = Button(self, text="TRUE",
                              bg="DarkOliveGreen3", command=self.true)
        self.truebtn.pack(side=TOP, pady=4)

        
        self.imgselector = Button(self, text="Select images",
                                  command=self.selectimages)
        self.imgselector.pack(side=BOTTOM, pady=4)

        self.resselector = Button(self, text="Select results",
                                  command=self.selectresults)
        self.resselector.pack(side=BOTTOM, pady=4)


        self.nextbtn = Button(self, text="Next", command=self.nextimg)
        self.nextbtn.pack(side=RIGHT)


        self.prevbtn = Button(self, text="Previous",
                              command=self.previmg)
        self.prevbtn.pack(side=LEFT)
        
        self.savebtn = Button(self, text="Save")#, bg="orange",
#                              command=self.save)
        self.savebtn.pack(side=LEFT, padx=50)

    def nextimg(self):
        self.data.getNext()
        self.parent.root.update()

    def previmg(self):
        self.data.getPrevious()
        self.parent.root.update()

    def true(self):
        self.data.updateImageData({"false_positive": False})
        self.nextimg()

    def false(self):
        res = self.data.getImageData()
        if res is not None:
            res.false_positive = True
        self.nextimg()

    def selectimages(self):
        self.parent.root.initImages()
        self.parent.root.update()

    def selectresults(self):
        self.parent.root.initImageData()
        self.parent.root.update()


class RightFrame(Frame):
    def __init__(self, parent):
        Frame.__init__(self, relief=RAISED, borderwidth=1)
        self.pack(side=RIGHT, fill=BOTH, expand=1)
        self.root = parent

        
        self.topright = TopRight(self)
        self.bottomright = BottomRight(self)


    def update(self):
        self.topright.updateImageData()
 
